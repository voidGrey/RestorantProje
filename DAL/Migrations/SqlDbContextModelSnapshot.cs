// <auto-generated />
using System;
using DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entites.Concrate.Adres", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CaddeSokak")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IlceId")
                        .HasColumnType("int");

                    b.Property<string>("PostaKodu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SehirId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId")
                        .IsUnique()
                        .HasFilter("[FirmaId] IS NOT NULL");

                    b.HasIndex("IlceId");

                    b.HasIndex("SehirId");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("Entites.Concrate.Firma", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirmaAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VergiDairesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VergiNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entites.Concrate.Ilce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IlceAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SehirId")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SehirId");

                    b.ToTable("Ilceler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IlceAdi = "Adalar",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 2,
                            IlceAdi = "Arnavutköy",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 3,
                            IlceAdi = "Ataşehir",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 4,
                            IlceAdi = "Avcılar",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 5,
                            IlceAdi = "Bağcılar",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 6,
                            IlceAdi = "Bahçelievler",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 7,
                            IlceAdi = "Bakırköy",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 8,
                            IlceAdi = "Başakşehir",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 9,
                            IlceAdi = "Bayrampaşa",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 10,
                            IlceAdi = "Beşiktaş",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 11,
                            IlceAdi = "Beykoz",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 12,
                            IlceAdi = "Beylikdüzü",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 13,
                            IlceAdi = "Beyoğlu",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 14,
                            IlceAdi = "Büyükçekmece",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 15,
                            IlceAdi = "Çatalca",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 16,
                            IlceAdi = "Çekmeköy",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 17,
                            IlceAdi = "Esenler",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 18,
                            IlceAdi = "Esenyurt",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 19,
                            IlceAdi = "Eyüpsultan",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 20,
                            IlceAdi = "Fatih",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 21,
                            IlceAdi = "Gaziosmanpaşa",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 22,
                            IlceAdi = "Güngören",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 23,
                            IlceAdi = "Kadıköy",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 24,
                            IlceAdi = "Kağıthane",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 25,
                            IlceAdi = "Kartal",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 26,
                            IlceAdi = "Küçükçekmece",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 27,
                            IlceAdi = "Maltepe",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 28,
                            IlceAdi = "Pendik",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 29,
                            IlceAdi = "Sancaktepe",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 30,
                            IlceAdi = "Sarıyer",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 31,
                            IlceAdi = "Silivri",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 32,
                            IlceAdi = "Sultanbeyli",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 33,
                            IlceAdi = "Sultangazi",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 34,
                            IlceAdi = "Şile",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 35,
                            IlceAdi = "Şişli",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 36,
                            IlceAdi = "Tuzla",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 37,
                            IlceAdi = "Ümraniye",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 38,
                            IlceAdi = "Üsküdar",
                            SehirId = 34
                        },
                        new
                        {
                            Id = 39,
                            IlceAdi = "Zeytinburnu",
                            SehirId = 34
                        });
                });

            modelBuilder.Entity("Entites.Concrate.Kategori", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 27, 14, 25, 16, 438, DateTimeKind.Local).AddTicks(4));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KategoriAciklama")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KategoriAdi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SelfKategoriID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.ToTable("Kategoriler");
                });

            modelBuilder.Entity("Entites.Concrate.Kullanici", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 27, 14, 25, 16, 438, DateTimeKind.Local).AddTicks(1697));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KullaniciAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("KullaniciAdi")
                        .IsUnique();

                    b.ToTable("Kullanicilar");
                });

            modelBuilder.Entity("Entites.Concrate.Masa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MasaID")
                        .HasColumnType("int");

                    b.Property<string>("MasaSifresi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.ToTable("Masalar");
                });

            modelBuilder.Entity("Entites.Concrate.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 27, 14, 25, 16, 438, DateTimeKind.Local).AddTicks(3728));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("RoleAdi")
                        .IsUnique();

                    b.ToTable("Roller");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateTime = new DateTime(2023, 9, 27, 14, 25, 16, 438, DateTimeKind.Local).AddTicks(4196),
                            RoleAdi = "Admin"
                        });
                });

            modelBuilder.Entity("Entites.Concrate.Sehir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PlakaKodu")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("SehirAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlakaKodu")
                        .IsUnique()
                        .HasFilter("[PlakaKodu] IS NOT NULL");

                    b.HasIndex("SehirAdi")
                        .IsUnique();

                    b.ToTable("Sehirler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlakaKodu = "01",
                            SehirAdi = "Adana"
                        },
                        new
                        {
                            Id = 2,
                            PlakaKodu = "02",
                            SehirAdi = "Adıyaman"
                        },
                        new
                        {
                            Id = 3,
                            PlakaKodu = "03",
                            SehirAdi = "Afyonkarahisar"
                        },
                        new
                        {
                            Id = 4,
                            PlakaKodu = "04",
                            SehirAdi = "Ağrı"
                        },
                        new
                        {
                            Id = 5,
                            PlakaKodu = "05",
                            SehirAdi = "Amasya"
                        },
                        new
                        {
                            Id = 6,
                            PlakaKodu = "06",
                            SehirAdi = "Ankara"
                        },
                        new
                        {
                            Id = 7,
                            PlakaKodu = "07",
                            SehirAdi = "Antalya"
                        },
                        new
                        {
                            Id = 8,
                            PlakaKodu = "08",
                            SehirAdi = "Artvin"
                        },
                        new
                        {
                            Id = 9,
                            PlakaKodu = "09",
                            SehirAdi = "Aydın"
                        },
                        new
                        {
                            Id = 10,
                            PlakaKodu = "10",
                            SehirAdi = "Balıkesir"
                        },
                        new
                        {
                            Id = 11,
                            PlakaKodu = "11",
                            SehirAdi = "Bilecik"
                        },
                        new
                        {
                            Id = 12,
                            PlakaKodu = "12",
                            SehirAdi = "Bingöl"
                        },
                        new
                        {
                            Id = 13,
                            PlakaKodu = "13",
                            SehirAdi = "Bitlis"
                        },
                        new
                        {
                            Id = 14,
                            PlakaKodu = "14",
                            SehirAdi = "Bolu"
                        },
                        new
                        {
                            Id = 15,
                            PlakaKodu = "15",
                            SehirAdi = "Burdur"
                        },
                        new
                        {
                            Id = 16,
                            PlakaKodu = "16",
                            SehirAdi = "Bursa"
                        },
                        new
                        {
                            Id = 17,
                            PlakaKodu = "17",
                            SehirAdi = "Çanakkale"
                        },
                        new
                        {
                            Id = 18,
                            PlakaKodu = "18",
                            SehirAdi = "Çankırı"
                        },
                        new
                        {
                            Id = 19,
                            PlakaKodu = "19",
                            SehirAdi = "Çorum"
                        },
                        new
                        {
                            Id = 20,
                            PlakaKodu = "20",
                            SehirAdi = "Denizli"
                        },
                        new
                        {
                            Id = 21,
                            PlakaKodu = "21",
                            SehirAdi = "Diyarbakır"
                        },
                        new
                        {
                            Id = 22,
                            PlakaKodu = "22",
                            SehirAdi = "Edirne"
                        },
                        new
                        {
                            Id = 23,
                            PlakaKodu = "23",
                            SehirAdi = "Elazığ"
                        },
                        new
                        {
                            Id = 24,
                            PlakaKodu = "24",
                            SehirAdi = "Erzincan"
                        },
                        new
                        {
                            Id = 25,
                            PlakaKodu = "25",
                            SehirAdi = "Erzurum"
                        },
                        new
                        {
                            Id = 26,
                            PlakaKodu = "26",
                            SehirAdi = "Eskişehir"
                        },
                        new
                        {
                            Id = 27,
                            PlakaKodu = "27",
                            SehirAdi = "Gaziantep"
                        },
                        new
                        {
                            Id = 28,
                            PlakaKodu = "28",
                            SehirAdi = "Giresun"
                        },
                        new
                        {
                            Id = 29,
                            PlakaKodu = "29",
                            SehirAdi = "Gümüşhane"
                        },
                        new
                        {
                            Id = 30,
                            PlakaKodu = "30",
                            SehirAdi = "Hakkâri"
                        },
                        new
                        {
                            Id = 31,
                            PlakaKodu = "31",
                            SehirAdi = "Hatay"
                        },
                        new
                        {
                            Id = 32,
                            PlakaKodu = "32",
                            SehirAdi = "Isparta"
                        },
                        new
                        {
                            Id = 33,
                            PlakaKodu = "33",
                            SehirAdi = "Mersin"
                        },
                        new
                        {
                            Id = 34,
                            PlakaKodu = "34",
                            SehirAdi = "Istanbul"
                        },
                        new
                        {
                            Id = 35,
                            PlakaKodu = "35",
                            SehirAdi = "İzmir"
                        },
                        new
                        {
                            Id = 36,
                            PlakaKodu = "36",
                            SehirAdi = "Kars"
                        },
                        new
                        {
                            Id = 37,
                            PlakaKodu = "37",
                            SehirAdi = "Kastamonu"
                        },
                        new
                        {
                            Id = 38,
                            PlakaKodu = "38",
                            SehirAdi = "Kayseri"
                        },
                        new
                        {
                            Id = 39,
                            PlakaKodu = "39",
                            SehirAdi = "Kırklareli"
                        },
                        new
                        {
                            Id = 40,
                            PlakaKodu = "40",
                            SehirAdi = "Kırşehir"
                        },
                        new
                        {
                            Id = 41,
                            PlakaKodu = "41",
                            SehirAdi = "Kocaeli"
                        },
                        new
                        {
                            Id = 42,
                            PlakaKodu = "42",
                            SehirAdi = "Konya"
                        },
                        new
                        {
                            Id = 43,
                            PlakaKodu = "43",
                            SehirAdi = "Kütahya"
                        },
                        new
                        {
                            Id = 44,
                            PlakaKodu = "44",
                            SehirAdi = "Malatya"
                        },
                        new
                        {
                            Id = 45,
                            PlakaKodu = "45",
                            SehirAdi = "Manisa"
                        },
                        new
                        {
                            Id = 46,
                            PlakaKodu = "46",
                            SehirAdi = "Kahramanmaraş"
                        },
                        new
                        {
                            Id = 47,
                            PlakaKodu = "47",
                            SehirAdi = "Mardin"
                        },
                        new
                        {
                            Id = 48,
                            PlakaKodu = "48",
                            SehirAdi = "Muğla"
                        },
                        new
                        {
                            Id = 49,
                            PlakaKodu = "49",
                            SehirAdi = "Muş"
                        },
                        new
                        {
                            Id = 50,
                            PlakaKodu = "50",
                            SehirAdi = "Nevşehir"
                        },
                        new
                        {
                            Id = 51,
                            PlakaKodu = "51",
                            SehirAdi = "Niğde"
                        },
                        new
                        {
                            Id = 52,
                            PlakaKodu = "52",
                            SehirAdi = "Ordu"
                        },
                        new
                        {
                            Id = 53,
                            PlakaKodu = "53",
                            SehirAdi = "Rize"
                        },
                        new
                        {
                            Id = 54,
                            PlakaKodu = "54",
                            SehirAdi = "Sakarya"
                        },
                        new
                        {
                            Id = 55,
                            PlakaKodu = "55",
                            SehirAdi = "Samsun"
                        },
                        new
                        {
                            Id = 56,
                            PlakaKodu = "56",
                            SehirAdi = "Siirt"
                        },
                        new
                        {
                            Id = 57,
                            PlakaKodu = "57",
                            SehirAdi = "Sinop"
                        },
                        new
                        {
                            Id = 58,
                            PlakaKodu = "58",
                            SehirAdi = "Sivas"
                        },
                        new
                        {
                            Id = 59,
                            PlakaKodu = "59",
                            SehirAdi = "Tekirdağ"
                        },
                        new
                        {
                            Id = 60,
                            PlakaKodu = "60",
                            SehirAdi = "Tokat"
                        },
                        new
                        {
                            Id = 61,
                            PlakaKodu = "61",
                            SehirAdi = "Trabzon"
                        },
                        new
                        {
                            Id = 62,
                            PlakaKodu = "62",
                            SehirAdi = "Tunceli"
                        },
                        new
                        {
                            Id = 63,
                            PlakaKodu = "63",
                            SehirAdi = "Şanlıurfa"
                        },
                        new
                        {
                            Id = 64,
                            PlakaKodu = "64",
                            SehirAdi = "Uşak"
                        },
                        new
                        {
                            Id = 65,
                            PlakaKodu = "65",
                            SehirAdi = "Van"
                        },
                        new
                        {
                            Id = 66,
                            PlakaKodu = "66",
                            SehirAdi = "Yozgat"
                        },
                        new
                        {
                            Id = 67,
                            PlakaKodu = "67",
                            SehirAdi = "Zonguldak"
                        },
                        new
                        {
                            Id = 68,
                            PlakaKodu = "68",
                            SehirAdi = "Aksaray"
                        },
                        new
                        {
                            Id = 69,
                            PlakaKodu = "69",
                            SehirAdi = "Bayburt"
                        },
                        new
                        {
                            Id = 70,
                            PlakaKodu = "70",
                            SehirAdi = "Karaman"
                        },
                        new
                        {
                            Id = 71,
                            PlakaKodu = "71",
                            SehirAdi = "Kırıkkale"
                        },
                        new
                        {
                            Id = 72,
                            PlakaKodu = "72",
                            SehirAdi = "Batman"
                        },
                        new
                        {
                            Id = 73,
                            PlakaKodu = "73",
                            SehirAdi = "Şırnak"
                        },
                        new
                        {
                            Id = 74,
                            PlakaKodu = "74",
                            SehirAdi = "Bartın"
                        },
                        new
                        {
                            Id = 75,
                            PlakaKodu = "75",
                            SehirAdi = "Ardahan"
                        },
                        new
                        {
                            Id = 76,
                            PlakaKodu = "76",
                            SehirAdi = "Iğdır"
                        },
                        new
                        {
                            Id = 77,
                            PlakaKodu = "77",
                            SehirAdi = "Yalova"
                        },
                        new
                        {
                            Id = 78,
                            PlakaKodu = "78",
                            SehirAdi = "Karabük"
                        },
                        new
                        {
                            Id = 79,
                            PlakaKodu = "79",
                            SehirAdi = "Kilis"
                        },
                        new
                        {
                            Id = 80,
                            PlakaKodu = "80",
                            SehirAdi = "Osmaniye"
                        },
                        new
                        {
                            Id = 81,
                            PlakaKodu = "81",
                            SehirAdi = "Düzce"
                        });
                });

            modelBuilder.Entity("Entites.Concrate.SiparisDetay", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Adet")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 27, 14, 25, 16, 438, DateTimeKind.Local).AddTicks(6718));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Fiyat")
                        .HasColumnType("float");

                    b.Property<int>("SiparisMasterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("SiparisMasterId");

                    b.HasIndex("UrunId");

                    b.HasIndex("ID", "UrunId")
                        .IsUnique();

                    b.ToTable("SiparisDetaylar");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 27, 14, 25, 16, 438, DateTimeKind.Local).AddTicks(9383));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MasaId")
                        .HasColumnType("int");

                    b.Property<double?>("ToplamTutar")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("MasaId")
                        .IsUnique()
                        .HasFilter("[MasaId] IS NOT NULL");

                    b.ToTable("SiparisMasterlar");
                });

            modelBuilder.Entity("Entites.Concrate.Urun", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 27, 14, 25, 16, 439, DateTimeKind.Local).AddTicks(1461));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Fiyat")
                        .HasColumnType("float");

                    b.Property<string>("FotografLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategoriID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrunAciklama")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrunAdi")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("KategoriID");

                    b.HasIndex("UrunAdi")
                        .IsUnique()
                        .HasFilter("[UrunAdi] IS NOT NULL");

                    b.ToTable("Urunler");
                });

            modelBuilder.Entity("KullaniciRole", b =>
                {
                    b.Property<int>("KullanicilarID")
                        .HasColumnType("int");

                    b.Property<int>("RollerID")
                        .HasColumnType("int");

                    b.HasKey("KullanicilarID", "RollerID");

                    b.HasIndex("RollerID");

                    b.ToTable("KullaniciRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entites.Concrate.Adres", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithOne("Adres")
                        .HasForeignKey("Entites.Concrate.Adres", "FirmaId");

                    b.HasOne("Entites.Concrate.Ilce", "Ilce")
                        .WithMany()
                        .HasForeignKey("IlceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.Concrate.Sehir", "Sehir")
                        .WithMany()
                        .HasForeignKey("SehirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");

                    b.Navigation("Ilce");

                    b.Navigation("Sehir");
                });

            modelBuilder.Entity("Entites.Concrate.Ilce", b =>
                {
                    b.HasOne("Entites.Concrate.Sehir", "Sehir")
                        .WithMany("Ilceler")
                        .HasForeignKey("SehirId");

                    b.Navigation("Sehir");
                });

            modelBuilder.Entity("Entites.Concrate.Kategori", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("Entites.Concrate.Kullanici", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("Entites.Concrate.Masa", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("Entites.Concrate.Role", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisDetay", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.HasOne("Entites.Concrate.SiparisMaster", "SiparisMaster")
                        .WithMany("SiparisDetay")
                        .HasForeignKey("SiparisMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.Concrate.Urun", "Urun")
                        .WithMany()
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");

                    b.Navigation("SiparisMaster");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisMaster", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.HasOne("Entites.Concrate.Masa", "Masa")
                        .WithOne("Siparis")
                        .HasForeignKey("Entites.Concrate.SiparisMaster", "MasaId");

                    b.Navigation("Firma");

                    b.Navigation("Masa");
                });

            modelBuilder.Entity("Entites.Concrate.Urun", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.HasOne("Entites.Concrate.Kategori", "Kategori")
                        .WithMany("Stoklar")
                        .HasForeignKey("KategoriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("KullaniciRole", b =>
                {
                    b.HasOne("Entites.Concrate.Kullanici", null)
                        .WithMany()
                        .HasForeignKey("KullanicilarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.Concrate.Role", null)
                        .WithMany()
                        .HasForeignKey("RollerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.Concrate.Firma", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entites.Concrate.Firma", b =>
                {
                    b.Navigation("Adres");
                });

            modelBuilder.Entity("Entites.Concrate.Kategori", b =>
                {
                    b.Navigation("Stoklar");
                });

            modelBuilder.Entity("Entites.Concrate.Masa", b =>
                {
                    b.Navigation("Siparis");
                });

            modelBuilder.Entity("Entites.Concrate.Sehir", b =>
                {
                    b.Navigation("Ilceler");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisMaster", b =>
                {
                    b.Navigation("SiparisDetay");
                });
#pragma warning restore 612, 618
        }
    }
}
