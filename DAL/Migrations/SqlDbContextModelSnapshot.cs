// <auto-generated />
using System;
using DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entites.Concrate.Adres", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CaddeSokak")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IlceId")
                        .HasColumnType("int");

                    b.Property<string>("PostaKodu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SehirId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId")
                        .IsUnique()
                        .HasFilter("[FirmaId] IS NOT NULL");

                    b.HasIndex("IlceId");

                    b.HasIndex("SehirId");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("Entites.Concrate.Firma", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirmaAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VergiDairesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VergiNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entites.Concrate.Ilce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IlceAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SehirId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SehirId");

                    b.ToTable("Ilceler");
                });

            modelBuilder.Entity("Entites.Concrate.Kategori", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(784));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");


                    b.Property<string>("KategoriAciklama")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("KategoriAdi")
                        .IsUnique();

                    b.ToTable("Kategoriler");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateTime = new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(1319),

                            KategoriAciklama = "Yiyecekler",
                            KategoriAdi = "Ana Yemek"
                        },
                        new
                        {
                            ID = 2,
                            CreateTime = new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(1321),

                            KategoriAciklama = "Çorba v.b.",
                            KategoriAdi = "Ara Sıcaklar"
                        },
                        new
                        {
                            ID = 3,
                            CreateTime = new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(1322),

                            KategoriAciklama = "Tatlılar",
                            KategoriAdi = "Tatlı"
                        },
                        new
                        {
                            ID = 4,
                            CreateTime = new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(1323),

                            KategoriAciklama = "Şarap v.b.",
                            KategoriAdi = "Alkollü İçecekelr"
                        },
                        new
                        {
                            ID = 5,
                            CreateTime = new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(1324),

                            KategoriAciklama = "Kola, su v.b.",
                            KategoriAdi = "Alkolsüz İçecekler"
                        });
                });

            modelBuilder.Entity("Entites.Concrate.Kullanici", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(2703));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");


                    b.Property<string>("KullaniciAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("KullaniciAdi")
                        .IsUnique();

                    b.ToTable("Kullanicilar");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateTime = new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(3111),

                            KullaniciAdi = "Admin",
                            Sifre = "123"
                        });
                });

            modelBuilder.Entity("Entites.Concrate.Masa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(9426));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");


                    b.Property<int>("MasaID")
                        .HasColumnType("int");

                    b.Property<string>("MasaSifresi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("MasaID")
                        .IsUnique();

                    b.ToTable("Masalar");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MasaID = 1
                        },
                        new
                        {
                            ID = 2,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MasaID = 2
                        },
                        new
                        {
                            ID = 3,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MasaID = 3
                        });
                });

            modelBuilder.Entity("Entites.Concrate.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(4270));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");


                    b.Property<string>("RoleAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("RoleAdi")
                        .IsUnique();

                    b.ToTable("Roller");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateTime = new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(4665),
                            RoleAdi = "Admin"

                        });
                });

            modelBuilder.Entity("Entites.Concrate.Sehir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PlakaKodu")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("SehirAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlakaKodu")
                        .IsUnique()
                        .HasFilter("[PlakaKodu] IS NOT NULL");

                    b.HasIndex("SehirAdi")
                        .IsUnique();

                    b.ToTable("Sehirler");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisDetay", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Adet")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(6888));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");


                    b.Property<double>("Fiyat")
                        .HasColumnType("float");

                    b.Property<int>("SiparisMasterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("SiparisMasterId");

                    b.HasIndex("UrunId");

                    b.HasIndex("ID", "UrunId")
                        .IsUnique();

                    b.ToTable("SiparisDetaylar");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 20, 16, 32, 56, 592, DateTimeKind.Local).AddTicks(8327));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");


                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MasaId")
                        .HasColumnType("int");

                    b.Property<double?>("ToplamTutar")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("MasaId")
                        .IsUnique()
                        .HasFilter("[MasaId] IS NOT NULL");

                    b.ToTable("SiparisMasterlar");
                });

            modelBuilder.Entity("Entites.Concrate.Urun", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 9, 20, 16, 32, 56, 593, DateTimeKind.Local).AddTicks(831));

                    b.Property<string>("FirmaId")
                        .HasColumnType("nvarchar(450)");


                    b.Property<double>("Fiyat")
                        .HasColumnType("float");

                    b.Property<string>("FotografLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategoriID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrunAciklama")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrunAdi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("FirmaId");

                    b.HasIndex("KategoriID");

                    b.HasIndex("UrunAdi")
                        .IsUnique();

                    b.ToTable("Urunler");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 85.0,
                            KategoriID = 4,
                            UrunAciklama = "50",
                            UrunAdi = "Tuborg Gold"
                        },
                        new
                        {
                            ID = 2,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 85.0,
                            KategoriID = 4,
                            UrunAciklama = "50",
                            UrunAdi = "Tuborg Red"
                        },
                        new
                        {
                            ID = 3,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 135.0,
                            KategoriID = 4,
                            UrunAciklama = "50",
                            UrunAdi = "Viski Single"
                        },
                        new
                        {
                            ID = 4,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 270.0,
                            KategoriID = 4,
                            UrunAciklama = "50",
                            UrunAdi = "Viski Double"
                        },
                        new
                        {
                            ID = 5,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 120.0,
                            KategoriID = 4,
                            UrunAciklama = "50",
                            UrunAdi = "Vodka"
                        },
                        new
                        {
                            ID = 6,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 120.0,
                            KategoriID = 4,
                            UrunAciklama = "50",
                            UrunAdi = "Cin"
                        },
                        new
                        {
                            ID = 7,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 240.0,
                            KategoriID = 1,
                            UrunAciklama = "Izgara biftek",
                            UrunAdi = "Biftek"
                        },
                        new
                        {
                            ID = 8,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 200.0,
                            KategoriID = 1,
                            UrunAciklama = "Makarna",
                            UrunAdi = "Makarna"
                        },
                        new
                        {
                            ID = 9,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 100.0,
                            KategoriID = 1,
                            UrunAciklama = "Pilav",
                            UrunAdi = "Pilav"
                        },
                        new
                        {
                            ID = 10,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 100.0,
                            KategoriID = 1,
                            UrunAciklama = "Izgara tavuk",
                            UrunAdi = "Tavuk"
                        },
                        new
                        {
                            ID = 11,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 180.0,
                            KategoriID = 1,
                            UrunAciklama = "Izgara köfte",
                            UrunAdi = "Köfte"
                        },
                        new
                        {
                            ID = 12,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 200.0,
                            KategoriID = 1,
                            UrunAciklama = "bursa iskender",
                            UrunAdi = "İskender"
                        },
                        new
                        {
                            ID = 13,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 240.0,
                            KategoriID = 3,
                            UrunAciklama = "güllaç",
                            UrunAdi = "Güllaç"
                        },
                        new
                        {
                            ID = 14,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 240.0,
                            KategoriID = 3,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "Kazandibi"
                        },
                        new
                        {
                            ID = 15,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 240.0,
                            KategoriID = 3,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "Tavuk göğüsü"
                        },
                        new
                        {
                            ID = 16,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 240.0,
                            KategoriID = 3,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "Sufle"
                        },
                        new
                        {
                            ID = 17,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 240.0,
                            KategoriID = 3,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "Cheese Kek"
                        },
                        new
                        {
                            ID = 18,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 24.0,
                            KategoriID = 5,
                            UrunAciklama = "Kola",
                            UrunAdi = "Kola"
                        },
                        new
                        {
                            ID = 19,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 24.0,
                            KategoriID = 5,
                            UrunAciklama = "Sarı Kola",
                            UrunAdi = "Sarı Kola"
                        },
                        new
                        {
                            ID = 20,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 14.0,
                            KategoriID = 5,
                            UrunAciklama = "Su",
                            UrunAdi = "Su"
                        },
                        new
                        {
                            ID = 21,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 24.0,
                            KategoriID = 5,
                            UrunAciklama = "Gazoz",
                            UrunAdi = "Gazoz"
                        },
                        new
                        {
                            ID = 22,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 24.0,
                            KategoriID = 5,
                            UrunAciklama = "Ayran",
                            UrunAdi = "Ayran"
                        },
                        new
                        {
                            ID = 23,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 14.0,
                            KategoriID = 5,
                            UrunAciklama = "Çay",
                            UrunAdi = "Çay"
                        },
                        new
                        {
                            ID = 24,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 14.0,
                            KategoriID = 2,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "Mercimek Ç."
                        },
                        new
                        {
                            ID = 25,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 14.0,
                            KategoriID = 2,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "Ezogelin Ç."
                        },
                        new
                        {
                            ID = 26,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 14.0,
                            KategoriID = 2,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "Domates Ç."
                        },
                        new
                        {
                            ID = 27,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 14.0,
                            KategoriID = 2,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "Tarhana Ç."
                        },
                        new
                        {
                            ID = 28,
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 14.0,
                            KategoriID = 2,
                            UrunAciklama = "kazandibi",
                            UrunAdi = "İşembe Ç."
                        });
                });

            modelBuilder.Entity("KullaniciRole", b =>
                {
                    b.Property<int>("KullanicilarID")
                        .HasColumnType("int");

                    b.Property<int>("RollerID")
                        .HasColumnType("int");

                    b.HasKey("KullanicilarID", "RollerID");

                    b.HasIndex("RollerID");

                    b.ToTable("KullaniciRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entites.Concrate.Adres", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithOne("Adres")
                        .HasForeignKey("Entites.Concrate.Adres", "FirmaId");

                    b.HasOne("Entites.Concrate.Ilce", "Ilce")
                        .WithMany()
                        .HasForeignKey("IlceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.Concrate.Sehir", "Sehir")
                        .WithMany()
                        .HasForeignKey("SehirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");

                    b.Navigation("Ilce");

                    b.Navigation("Sehir");
                });

            modelBuilder.Entity("Entites.Concrate.Ilce", b =>
                {
                    b.HasOne("Entites.Concrate.Sehir", "Sehir")
                        .WithMany("Ilceler")
                        .HasForeignKey("SehirId");

                    b.Navigation("Sehir");
                });

            modelBuilder.Entity("Entites.Concrate.Kategori", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("Entites.Concrate.Kullanici", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("Entites.Concrate.Masa", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("Entites.Concrate.Role", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisDetay", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.HasOne("Entites.Concrate.SiparisMaster", "SiparisMaster")
                        .WithMany("SiparisDetay")
                        .HasForeignKey("SiparisMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.Concrate.Urun", "Urun")
                        .WithMany()
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");

                    b.Navigation("SiparisMaster");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisMaster", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.HasOne("Entites.Concrate.Masa", "Masa")
                        .WithOne("Siparis")
                        .HasForeignKey("Entites.Concrate.SiparisMaster", "MasaId");

                    b.Navigation("Firma");

                    b.Navigation("Masa");
                });

            modelBuilder.Entity("Entites.Concrate.Urun", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaId");

                    b.HasOne("Entites.Concrate.Kategori", "Kategori")
                        .WithMany("Stoklar")
                        .HasForeignKey("KategoriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("KullaniciRole", b =>
                {
                    b.HasOne("Entites.Concrate.Kullanici", null)
                        .WithMany()
                        .HasForeignKey("KullanicilarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.Concrate.Role", null)
                        .WithMany()
                        .HasForeignKey("RollerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.Concrate.Firma", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entites.Concrate.Firma", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entites.Concrate.Firma", b =>
                {
                    b.Navigation("Adres");
                });

            modelBuilder.Entity("Entites.Concrate.Kategori", b =>
                {
                    b.Navigation("Stoklar");
                });

            modelBuilder.Entity("Entites.Concrate.Masa", b =>
                {
                    b.Navigation("Siparis");
                });

            modelBuilder.Entity("Entites.Concrate.Sehir", b =>
                {
                    b.Navigation("Ilceler");
                });

            modelBuilder.Entity("Entites.Concrate.SiparisMaster", b =>
                {
                    b.Navigation("SiparisDetay");
                });
#pragma warning restore 612, 618
        }
    }
}
